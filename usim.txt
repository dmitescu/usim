USIM
=======

Project structure:

./        - main .cpp and .h files
./data    - raw data and simulated data
./plotSim - matlab script to plot simulated data
./data/.. - depending on the date simulated, I make a new
            folder which contains graphs and data

Project files:

u_sim.cpp        - Implementation of the libraries/main program
d_universe.h     - Definitions of data structures
f_universe.cpp   - Definitions of function on data structures
f_processing.cpp - Definitions of functions on universes
                   (processing, stepping, etc)

Program description:

Classes are created for a vector, an object, a container for an object
(AKA a linked list), and an universe represents such a linked list
plus an object count.

In an universe, you can add an object, delete an object.
You can also step with a dt, and collide two objects (to be implemented).

The algorithm works as follows: after the universe is initialized,
steps are performed dt by dt, until the time distance is reached.
The smaller the dts are, the higher precision the simulation will have.
Each step, all the forces are added, and the acceleration for each object is
calculated (by diving the mass). Since the naive implementation (Euler's algorithm),
isn't precise and errors sum up quickly, Runge Kutta algorithm is used to
compute the velocity (acceleration's derivative), and it is applied again on the velocity,
thus resulting the distance travelled. This is repeated for every point in the dataset,
resulting a step. After all steps are completed, the data is written in the file,
and can be plotted. If a particle moves too far away, it is deleted (we assume it will
never get back in orbits).
